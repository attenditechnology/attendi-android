package nl.attendi.attendispeechservice.services.asynctranscribe

import kotlinx.serialization.json.Json
import nl.attendi.attendispeechservice.services.asynctranscribe.dto.request.TranscribeAsyncAppSettingsRequest
import nl.attendi.attendispeechservice.services.asynctranscribe.dto.request.TranscribeAsyncMessageRequest
import nl.attendi.attendispeechservice.services.asynctranscribe.dto.request.TranscribeAsyncVoiceEditingAppSettingsRequest
import java.util.UUID

/**
 * Utility object responsible for generating control and configuration messages
 * used in Attendi's asynchronous WebSocket-based transcription service.
 *
 * These messages are encoded as JSON and exchanged with the backend to initiate,
 * control, and gracefully close live transcription sessions.
 *
 * ## Usage
 * - Call [initialConfiguration] after opening a WebSocket to start a session.
 * - Call [close] to signal the end of an audio stream.
 *
 * This abstraction simplifies message creation and ensures message format compliance.
 */
internal object AttendiAsyncTranscribeServiceMessages {

    /**
     * Constructs a JSON message that configures a new transcription session.
     *
     * This message should be sent immediately after establishing a WebSocket
     * connection to define session metadata, feature flags, and the model to use.
     *
     * @param type The message type. Defaults to `"configuration"`.
     * @param model The transcription model to use (e.g., `"ResidentialCare"`).
     * @param reportId Optional report identifier. A random UUID is generated by default.
     * @param isVoiceEditingEnabled Whether Attendi's "schrijfhulp" voice editing feature is enabled.
     * @return A serialized JSON string representing the configuration message.
     */
    fun initialConfiguration(
        type: String = "configuration",
        model: String = "ResidentialCare",
        reportId: String = UUID.randomUUID().toString(),
        isVoiceEditingEnabled: Boolean = true
    ): String {
        return Json.encodeToString(
            TranscribeAsyncMessageRequest(
                type = type,
                model = model,
                reportId = reportId,
                features = TranscribeAsyncAppSettingsRequest(
                    voiceEditing = TranscribeAsyncVoiceEditingAppSettingsRequest(
                        isEnabled = isVoiceEditingEnabled
                    )
                )
            )
        )
    }

    /**
     * Returns a JSON message that signals the end of an audio stream.
     *
     * This should be sent when disconnecting the WebSocket to allow the backend
     * to finalize and close the transcription session gracefully.
     *
     * @return A serialized JSON string: `{"type": "endOfAudioStream"}`.
     */
    fun close(): String {
        return "{\"type\": \"endOfAudioStream\"}"
    }
}